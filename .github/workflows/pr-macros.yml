name: PR-macros

on:
  pull_request_target:
    types: [opened, edited, synchronize]

permissions:
  pull-requests: write
  contents: read

jobs:
  update_pr_macros:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Post PR macro information as a comment
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            const prNumber = pr.number;

            // Generate Surge preview URL
            const previewUrl = `https://a11ycat-pr-${prNumber}.surge.sh`;

            // Try to extract task ticket from branch name (supports Jira, Linear, GitHub issues, etc.)
            // Matches patterns like: PROJ-123, LIN-456, #123, issue-123
            const jiraMatch = branchName.match(/([A-Z]+-\d+)/);
            const linearMatch = branchName.match(/(LIN-\d+)/i);
            const issueMatch = branchName.match(/(?:issue-|#)(\d+)/i);
            
            let taskLink = "_No task ticket found in branch name_";
            
            // Handle task link replacement
            if (jiraMatch) {
              const jiraTicket = jiraMatch[0];
              // Update this URL with your actual Jira domain if you use Jira
              taskLink = `[${jiraTicket}](https://your-org.atlassian.net/browse/${jiraTicket})`;
            } else if (linearMatch) {
              const linearTicket = linearMatch[0];
              taskLink = `[${linearTicket}](https://linear.app/issue/${linearTicket})`;
            } else if (issueMatch) {
              const issueNumber = issueMatch[1];
              taskLink = `[#${issueNumber}](https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${issueNumber})`;
            }

            const comment = `## 🤖 PR Information

**🌐 Preview Deployment:** ${previewUrl}  
**📋 Task Link:** ${taskLink}  
**🔗 Latest Commit:** ${pr.head.sha.substring(0, 7)}

_This comment will update automatically when you push new commits._`;

            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.find(c => 
              c.user.type === 'Bot' && c.body.includes('🤖 PR Information')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment,
              });
            }

