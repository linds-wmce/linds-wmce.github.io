name: PR-macros

on:
  pull_request_target:
    types: [opened, edited, synchronize]
  workflow_dispatch:

permissions:
  pull-requests: write
  contents: read

jobs:
  update_pr_macros:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Update PR body and post comment
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const branchName = pr.head.ref;
            const prNumber = pr.number;
            const previewUrl = 'https://a11ycat-pr-' + prNumber + '.surge.sh';
            const jiraMatch = branchName.match(/([A-Z]+-\d+)/);
            const linearMatch = branchName.match(/(LIN-\d+)/i);
            const issueMatch = branchName.match(/(?:issue-|#)(\d+)/i);
            let taskLink = "_No task ticket found in branch name_";
            if (jiraMatch) {
              const jiraTicket = jiraMatch[0];
              taskLink = '[' + jiraTicket + '](https://your-org.atlassian.net/browse/' + jiraTicket + ')';
            } else if (linearMatch) {
              const linearTicket = linearMatch[0];
              taskLink = '[' + linearTicket + '](https://linear.app/issue/' + linearTicket + ')';
            } else if (issueMatch) {
              const issueNumber = issueMatch[1];
              taskLink = '[#' + issueNumber + '](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/issues/' + issueNumber + ')';
            }
            const shortSha = pr.head.sha.substring(0, 7);
            
            let prBody = pr.body || '';
            prBody = prBody.replace(/\$PREVIEW_LINK/g, previewUrl);
            prBody = prBody.replace(/\$TASK_LINK/g, taskLink);
            prBody = prBody.replace(/revision=([a-f0-9]{40})/g, 'revision=' + pr.head.sha);
            
            try {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                body: prBody,
              });
              console.log('Successfully updated PR body');
            } catch (error) {
              console.log('Could not update PR body (permissions issue):', error.message);
            }
            
            const comment = '## 🤖 PR Information\n\n' +
              '**🌐 Preview Deployment:** ' + previewUrl + '  \n' +
              '**📋 Task Link:** ' + taskLink + '  \n' +
              '**🔗 Latest Commit:** ' + shortSha + '\n\n' +
              '_This comment will update automatically when you push new commits._';
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            const botComment = comments.find(c => c.user.type === 'Bot' && c.body.includes('🤖 PR Information'));
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment,
              });
            }

