name: PR Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

permissions:
  pull-requests: write

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 🧰 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      - name: 🔨 Build Ember app
        run: yarn build --environment=production

      - name: 🚀 Deploy to Surge
        id: deploy
        run: |
          npm install -g surge
          SURGE_DOMAIN="a11ycat-pr-${{ github.event.pull_request.number }}.surge.sh"
          surge ./dist $SURGE_DOMAIN --token ${{ secrets.SURGE_TOKEN }}
          echo "url=https://$SURGE_DOMAIN" >> $GITHUB_OUTPUT

      - name: 💬 Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://a11ycat-pr-${prNumber}.surge.sh`;
            
            const comment = `## 🎆 Preview Deployment
            
            Your changes have been deployed to a preview environment!
            
            🔗 **Preview URL:** ${previewUrl}
            
            This preview will update automatically when you push new commits to this PR.
            
            _Powered by [Surge](https://surge.sh)_`;
            
            // Find existing preview comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const existingComment = comments.find(c => 
              c.user.type === 'Bot' && c.body.includes('Preview Deployment')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment,
              });
            }

